#!/bin/sh

BASE_DIR=$(pwd)
PROJECT_NAME=$(basename $(pwd))
IMAGE_NAME=$PROJECT_NAME-dev-env
PROJECT_HOST_PATH=$PWD
DH_REPO=jakubstastny/docker-project-manager

run() {
  echo "$(tput setaf 6)\$ $(tput setaf 7)$@$(tput sgr0)"
  "$@"
}

case $1 in
  ssh-keygen)
    run mkdir .ssh && chmod 700 .ssh
    run ssh-keygen -t rsa -N "" -C $PROJECT_NAME -f .ssh/id_rsa
  build)
    $0 update
    run docker build . -t $IMAGE_NAME ;;
    run docker system prune -f
  create)
    $0 update
    if test "$1" = "--show-instructions"; then
      run docker run --rm -v $BASE_DIR:/projects/$PROJECT_NAME $DH_REPO create $PROJECT_NAME $PROJECT_HOST_PATH $*
    else
      eval $(docker run --rm -v $BASE_DIR:/projects/$PROJECT_NAME $DH_REPO create $PROJECT_NAME $PROJECT_HOST_PATH $*)
    fi ;;
  rm|remove|delete)
    run docker rm $IMAGE_NAME
    run docker system prune -f
    ;;

  start)
    $0 update
    if docker ps | grep $IMAGE_NAME; then
      echo "$(tput setaf 1)~ Container $IMAGE_NAME is already running.$(tput sgr0)"
    else
      run docker start $IMAGE_NAME
    fi ;;
  stop)
    if docker ps | grep $IMAGE_NAME; then
      run docker stop $IMAGE_NAME
    else
      echo "$(tput setaf 1)~ Container $IMAGE_NAME is not running.$(tput sgr0)"
    fi ;;
  status)
    if docker ps | grep $IMAGE_NAME; then
      echo "$(tput setaf 2)✔ $IMAGE_NAME$(tput sgr0)"
    else
      echo "$(tput setaf 1)✗ $IMAGE_NAME$(tput sgr0)"
    fi ;;

  a|attach)
    run docker exec -it $IMAGE_NAME zsh ;;

  update)
    run docker pull $DH_REPO
    run docker run --rm -v $BASE_DIR:/root/project-directory $DH_REPO update $PROJECT_HOST_PATH ;;
  *)
    echo "\
$(tput setaf 5)Commands$(tput setaf 7)

* $(tput setaf 3)ssh-keygen$(tput setaf 7): Generate SSH key pair.
* $(tput setaf 3)build$(tput setaf 7): Build the dev image.

* $(tput setaf 2)create$(tput setaf 7): Create a new container from this image (make sure the built image is up to date).
* $(tput setaf 2)start$(tput setaf 7): Start the container.
* $(tput setaf 2)attach$(tput setaf 7): Create a new tmux session within the container or attach to an existing one.

* $(tput setaf 2)status$(tput setaf 7): Whether the container is running or not.

* $(tput setaf 1)stop$(tput setaf 7): Stop the container.
* $(tput setaf 1)remove$(tput setaf 7): Remove the container, the image as well as all the untagged images.

* $(tput setaf 4)update$(tput setaf 7): Update this script from GitHub.$(tput sgr0)"
    ;;
esac
